#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_BUFF_SIZE 10000

typedef struct node {
    char *line;
    struct node *next;
} Node;

Node *make_list(){
    Node *list =malloc(sizeof(Node));
    if(list == NULL){
        perror("Failed to allocate memory for list in make_list\n");
        return NULL;
    }
    list->next = NULL;
    list->line = NULL;
    return list;
}

void free_list(Node *head) {
    if(head == NULL){
        return;
    }
    Node *cur_node = head;
    while (cur_node->next != NULL) {
        Node *delete_item = cur_node;
        cur_node = cur_node->next;
        free(delete_item->line);
        free(delete_item);
    }
    free(cur_node->line);
    free(cur_node);
    free(head);
}

Node *make_node(char *line) {
    if(line == NULL){
        fprintf(stderr, "NULL input in make_node\n");
        return NULL;
    }
    
    size_t size = strlen(line);
    
    Node *new_node = malloc(sizeof(Node));
    if(new_node == NULL){
        perror("Failed to allocate memory for new_node in make_node\n");
        return NULL;
    }
    
    new_node->line = malloc((size+1));
    if(new_node->line == NULL){
        perror("Failed to allocate memory for new_node->line in make_node\n");
        free(new_node);
        return NULL;
    }
    strncpy(new_node->line,line,size);
    new_node->next = NULL;
    return new_node;
}

void print_list(Node *list) {
    if(list == NULL || list->next == NULL){
        return;
    }
    Node *iterator = list->next;
    while (iterator != NULL) {
        fputs(iterator->line, stdout);
        iterator = iterator->next;
    }
}

int main() {
    Node *list =make_list();
    char buff[MAX_BUFF_SIZE];
    Node *cur_node = list;
    char* res;
    while (1) {
        res = fgets(buff, MAX_BUFF_SIZE, stdin);
        if (res == NULL || buff[0] == '.') {
            break;
        }
        if(strlen(buff) == MAX_BUFF_SIZE - 1 && buff[MAX_BUFF_SIZE - 2] != '\n'){
            fprintf(stderr, "String is too long, max allowed length is %d\n", MAX_BUFF_SIZE - 1);
            free_list(list);
            return -1;
        }
        cur_node->next = make_node(buff);
        if(cur_node->next == NULL){
            return -1;
        }
        cur_node = cur_node->next;
    }
    print_list(list);
    free_list(list);
    return 0;
}
